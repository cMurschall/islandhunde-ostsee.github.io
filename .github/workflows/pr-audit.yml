name: PR Audit (Hugo + Links + PSI + OG)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write

env:
  GENERATE_OG: "false" # -> auf "true" stellen, wenn OG-Bilder erzeugt werden sollen

jobs:
  audit:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (PR merge ref)
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.148.2'
          extended: true

      # âœ… Neu: Node + deine Projekt-Dependencies
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install project dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f package.json ]; then
            npm install
          else
            echo "No package.json found, skipping npm install"
          fi


      # Hugo Setup-Action: schnell & stabil fÃ¼r Extended-Builds. :contentReference[oaicite:1]{index=1}

      - name: Build site
        run: hugo --minify

      - name: Install Pillow
        run: pip install pillow

      - name: Convert images to WebP
        run: python3 scripts/convert-to-webp.py

      - name: Get changed files (base..PR)
        id: changed
        shell: bash
        run: |
          echo "files<<EOF" >> "$GITHUB_OUTPUT"
          git diff --name-only HEAD^1 HEAD | tr -d '\r'
          echo "EOF" >> "$GITHUB_OUTPUT"
      # Diff-Methode fÃ¼r PRs (HEAD^1 vs HEAD) ist ein bewÃ¤hrtes Pattern. :contentReference[oaicite:2]{index=2}

      - name: Link check (public/)
        id: lychee
        uses: lycheeverse/lychee-action@v2
        with:
          workingDirectory: public
          args: "--base . --cache --max-cache-age 1d --verbose './**/*.html'"
          format: markdown
          output: lychee/out.md
          fail: false
          jobSummary: true
      # lychee-action: schneller Linkchecker fÃ¼r HTML/MD in CI. :contentReference[oaicite:3]{index=3}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      # Node-Setup offizielles Action-Repo. :contentReference[oaicite:4]{index=4}

      - name: Install PSI deps
        run: |
          npm init -y >/dev/null 2>&1
          npm install --no-audit --no-fund undici fast-xml-parser

      - name: Compute URLs & run PSI
        id: psi
        env:
          BASE_URL: ${{ vars.SITE_BASE_URL }}
          PSI_KEY: ${{ secrets.GOOGLE_API_KEY }}
          CHANGED: ${{ steps.changed.outputs.files }}
        run: |
          mkdir -p scripts reports
          cat > scripts/psi-ci.mjs <<'EOF'
          import fs from "node:fs";
          import path from "node:path";
          import {XMLParser} from "fast-xml-parser";
          import {fetch} from "undici";

          const BASE = process.env.BASE_URL?.replace(/\/+$/,'') || 'https://example.com';
          const KEY  = process.env.PSI_KEY || '';
          const changed = (process.env.CHANGED || '')
            .split(/\s+/).map(s=>s.trim()).filter(Boolean);

          // 1) URLs aus sitemap.xml ziehen
          const smPath = path.join('public','sitemap.xml');
          const xml = fs.readFileSync(smPath, 'utf8');
          const parser = new XMLParser();
          const sm = parser.parse(xml);
          const sitemapUrls = new Set([].concat(sm?.urlset?.url || []).map(u=>u.loc).filter(Boolean));

          // 2) Content-Ã„nderungen -> passende URLs in der Sitemap raten
          const contentFiles = changed.filter(f => /^content\/.*\.(md|markdown|html)$/i.test(f));
          const urlSet = new Set();
          function guessUrlFromContent(p){
            const rel = p.replace(/^content\//,'').replace(/(_index)?\.(md|markdown|html)$/i,'');
            const candidates = [`${BASE}/${rel}/`, `${BASE}/${rel}`];
            for (const u of sitemapUrls){
              if (candidates.some(c=>u.startsWith(c))) return u;
            }
            return null;
          }
          for (const f of contentFiles){
            const u = guessUrlFromContent(f);
            if (u) urlSet.add(u);
          }
          if (urlSet.size === 0){
            // Layout/Assets geÃ¤ndert? Dann wenigstens Home prÃ¼fen.
            urlSet.add(BASE + '/');
          }

          // 3) PSI aufrufen (mobile + 4 Kategorien)
          const categories = ['performance','accessibility','best-practices','seo'];
          const results = [];
          for (const url of urlSet){
            const endpoint = new URL('https://www.googleapis.com/pagespeedonline/v5/runPagespeed');
            endpoint.searchParams.set('url', url);
            endpoint.searchParams.set('strategy', 'mobile');
            categories.forEach(c => endpoint.searchParams.append('category', c));
            if (KEY) endpoint.searchParams.set('key', KEY);

            let data=null, error=null;
            try{
              const r = await fetch(endpoint, {method:'GET'});
              if (!r.ok) throw new Error(`${r.status} ${r.statusText}`);
              data = await r.json();
            }catch(e){ error = String(e); }

            const lh = data?.lighthouseResult;
            const audits = lh?.audits || {};
            const score = cat => {
              const s = lh?.categories?.[cat]?.score;
              return typeof s === 'number' ? Math.round(s*100) : null;
            };
            results.push({
              url, error,
              scores: {
                performance: score('performance'),
                accessibility: score('accessibility'),
                seo: score('seo'),
                best_practices: score('best-practices')
              },
              metrics: {
                LCP_ms: audits['largest-contentful-paint']?.numericValue ?? null,
                INP_ms: audits['interaction-to-next-paint']?.numericValue ?? null,
                CLS: audits['cumulative-layout-shift']?.numericValue ?? null
              }
            });
          }

          const md = [
            '### PageSpeed Insights (mobile)',
            '',
            '| URL | Perf | Acc | SEO | BP | LCP (ms) | INP (ms) | CLS |',
            '|---|---:|---:|---:|---:|---:|---:|---:|',
            ...results.map(r => `| ${r.url} | ${r.scores?.performance ?? 'â€”'} | ${r.scores?.accessibility ?? 'â€”'} | ${r.scores?.seo ?? 'â€”'} | ${r.scores?.best_practices ?? 'â€”'} | ${r.metrics.LCP_ms ?? 'â€”'} | ${r.metrics.INP_ms ?? 'â€”'} | ${r.metrics.CLS ?? 'â€”'} |`),
            '',
            '> Hinweis: PSI liefert Lighthouse-Labwerte; reale CrUX-Daten werden separat Ã¼ber die CrUX-API empfohlen.']
            .join('\n');

          fs.mkdirSync('reports', {recursive:true});
          fs.writeFileSync('reports/psi.json', JSON.stringify(results,null,2));
          fs.writeFileSync('reports/psi.md', md);
          console.log(md);
          EOF
          node scripts/psi-ci.mjs

      - name: Compose PR body
        id: body
        shell: bash
        run: |
          echo "md<<'EOF'" >> "$GITHUB_OUTPUT"
          echo "## ðŸ”Ž PR-Audit"
          echo
          cat reports/psi.md
          echo
          echo "### Link Checker"
          if [ -f public/lychee/out.md ]; then
            cat public/lychee/out.md
          elif [ -f lychee/out.md ]; then
            cat lychee/out.md
          else
            echo "Keine defekten Links gefunden."
          fi
          echo
          echo "_Autom. Kommentar â€“ editierbar_"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: PR comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.number }}
          body: ${{ steps.body.outputs.md }}
      # PR-Kommentar-Action (update statt Spam). :contentReference[oaicite:5]{index=5}

      - name: (Optional) Generate OG images
        if: ${{ env.GENERATE_OG == 'true' }}
        run: |
          npm install --no-audit --no-fund satori @resvg/resvg-js gray-matter
          node -e "require('fs').mkdirSync('scripts',{recursive:true})"
          cat > scripts/og-ci.mjs <<'EOF'
          import fs from "node:fs";
          import path from "node:path";
          import matter from "gray-matter";
          import satori from "satori";
          import { Resvg } from "@resvg/resvg-js";

          const font = fs.readFileSync(path.join(process.cwd(), "assets", "fonts", "Inter-SemiBold.ttf"));
          const files = (process.env.CHANGED || '').split(/\s+/).filter(Boolean)
            .filter(f => /^content\/.*\.(md|markdown)$/i.test(f));

          const OUTDIR = path.join("static","og");
          fs.mkdirSync(OUTDIR,{recursive:true});

          for(const f of files){
            const src = fs.readFileSync(f,'utf8');
            const fm = matter(src);
            const hasOg = fm.data?.imagesocial || fm.data?.image || fm.data?.cover;
            if (hasOg) continue;

            // Dateiname ableiten
            const rel = f.replace(/^content\//,'').replace(/(_index)?\.(md|markdown)$/i,'');
            const outfile = path.join(OUTDIR, `${rel.replace(/[\/\\]/g,'_')}.png`);

            const title = String(fm.data?.title || rel).slice(0,120);
            const svg = await satori(
              {
                type: "div",
                props: {
                  style: { display: "flex", width: "1200px", height: "630px", background: "white", alignItems: "center", justifyContent: "center" },
                  children: {
                    type: "div",
                    props: {
                      style: { fontSize: "60px", fontWeight: 600, padding: "60px", textAlign: "center", color: "black" },
                      children: title
                    }
                  }
                }
              },
              { width: 1200, height: 630, fonts: [{ name: "Inter", data: font, weight: 600, style: "normal" }] }
            );
            const png = new Resvg(svg).render().asPng();
            fs.writeFileSync(outfile, png);
            console.log("OG ->", outfile);
          }
          EOF
          node scripts/og-ci.mjs

      - name: Commit generated OG images
        if: ${{ env.GENERATE_OG == 'true' }}
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci(og): add missing Open Graph images"
          add_options: "-A"
      # Auto-Commit Action: generierte Artefakte zurÃ¼ck ins PR. :contentReference[oaicite:6]{index=6}
